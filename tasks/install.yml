---
# PostgreSQL installation

- name: Ensure the needed APT packages are present
  apt:
    name:
      - tar
      - gzip
      - build-essential
      - curl
      - make
      - gcc
      - zlib1g-dev
      - libperl-dev
      - libpython-dev
      - libssl-dev
      - libreadline-dev
      - libsystemd-dev
      - python-psycopg2
    update_cache: true
    cache_valid_time: 600

- name: Ensure the postgresql user is created
  user:
    name: "{{ postgresql_user}}"
    shell: /bin/bash
    create_home: true

- name: Ensure the src dir is created
  file:
    path: "{{ postgresql_src_dir }}"
    state: directory
    owner: "{{ postgresql_user}}"
    group: "{{ postgresql_user}}"
    mode: 0755

- name: Ensure postgresql tmp dir is created
  file:
    path: "{{ postgresql_tmp_dir }}"
    state: directory
    mode: 0755
    owner: "{{ postgresql_user}}"
    group: "{{ postgresql_user}}"

- name: Get postgresql source code
  unarchive:
    src: "https://ftp.postgresql.org/pub/source/v{{ postgresql_version }}/postgresql-{{ postgresql_version }}.tar.gz"
    dest: "{{ postgresql_tmp_dir }}"
    owner: "{{ postgresql_user}}"
    group: "{{ postgresql_user}}"
    remote_src: true
    creates: "{{ postgresql_tmp_dir }}/configure"
    extra_opts:
      - '--strip=1'

- name: Configure postgresql source
  become: true
  become_user: "{{ postgresql_user }}"
  command: ./configure {{ postgresql_config_params }} --prefix={{ postgresql_src_dir }} --with-openssl --with-systemd
  args:
    chdir: "{{ postgresql_tmp_dir }}"
    creates: "{{ postgresql_tmp_dir }}/GNUmakefile"

- name: Build postgresql from source
  become: true
  become_user: "{{ postgresql_user }}"
  command: make world -j4
  args:
    chdir: "{{ postgresql_tmp_dir }}"
    creates: "{{ postgresql_tmp_dir }}/src/bin/psql/psql"

- name: Install postgresql
  command: make install-world
  args:
    chdir: "{{ postgresql_tmp_dir }}"
    creates: "{{ postgresql_src_dir }}/bin/psql"

- name: Ensure needed ENV vars are set
  copy:
    dest: /etc/profile.d/100-postgresql.sh
    content: |
      export PATH={{ postgresql_src_dir }}/bin:$PATH
      export LD_LIBRARY_PATH={{ postgresql_src_dir }}/lib
      export MANPATH={{ postgresql_src_dir }}/share/man:$MANPATH

- name: Ensure postgresql data dir is created
  file:
    path: "{{ postgresql_data_dir }}"
    state: directory
    mode: 0700
    recurse: true
    owner: "{{ postgresql_user}}"
    group: "{{ postgresql_user}}"

- name: Initillize postgresql database
  become: true
  become_user: "{{ postgresql_user }}"
  command: "{{ postgresql_src_dir }}/bin/initdb -D {{ postgresql_data_dir }}"
  args:
    creates: "{{ postgresql_data_dir }}/pg_hba.conf"

- name: Ensure postgresql failover dir is created
  file:
    path: "{{ postgresql_data_dir }}/failover"
    mode: 0700
    state: directory
    owner: "{{ postgresql_user}}"
    group: "{{ postgresql_user}}"

- name: Ensure postgresql archive dir is created
  file:
    path: "{{ postgresql_data_dir }}/pg_xlogarch"
    mode: 0700
    state: directory
    owner: "{{ postgresql_user}}"
    group: "{{ postgresql_user}}"

- name: Ensure pg_hba.conf is updated
  template:
    src: pg_hba.conf.j2
    dest: "{{ postgresql_data_dir }}/pg_hba.conf"
    mode: 0600
    owner: "{{ postgresql_user}}"
    group: "{{ postgresql_user}}"

- name: Ensure postgresql.conf is updated
  template:
    src: postgresql.conf.j2
    dest: "{{ postgresql_data_dir }}/postgresql.conf"
    mode: 0600
    owner: "{{ postgresql_user}}"
    group: "{{ postgresql_user}}"

- name: Ensure recovery.conf is present on slave node
  template:
    src: recovery.conf.j2
    dest: "{{ postgresql_data_dir }}/recovery.conf"
    mode: 0600
    owner: "{{ postgresql_user}}"
    group: "{{ postgresql_user}}"
  when: not postgresql_master_node

- name: Ensure recovery.conf is absent on master node
  file:
    path: "{{ postgresql_data_dir }}/recovery.conf"
    state: absent
  when: postgresql_master_node

- name: Ensure postgresql socket dir is created
  file:
    path: "{{ postgresql_unix_socket_dir }}"
    state: directory
    mode: 0755
    owner: "{{ postgresql_user}}"
    group: "{{ postgresql_user}}"

- name: Ensure socket symlink is present
  file:
    state: link
    src: "{{ postgresql_unix_socket_dir }}.s.PGSQL.{{ postgresql_port }}"
    dest: "/tmp/.s.PGSQL.{{ postgresql_port }}"
    force: true

- name: Ensure postgresql tmp files config is present
  copy:
    dest: /usr/lib/tmpfiles.d/postgresql.conf
    mode: 0755
    content: |
      d {{ postgresql_unix_socket_dir }} 0755 {{ postgresql_user }} {{ postgresql_user }} - -
      L /tmp/.s.PGSQL.{{ postgresql_port }} - - - - {{ postgresql_unix_socket_dir }}.s.PGSQL.{{ postgresql_port }}

- name: Ensure postgresql systemd service file is present
  template:
    src: postgresql.service.j2
    dest: /etc/systemd/system/postgresql.service
    mode: 0664
  register: change_postgresql_service
  when: postgresql_configure_systemd

- name: Reload the systemd daemon
  systemd:
    daemon_reload: true
  when:
    - change_postgresql_service is changed
    - postgresql_configure_systemd

- name: Ensure the postgresql service is started and enabled
  service:
    name: postgresql
    state: started
    enabled: true
  when: postgresql_configure_systemd

- name: Ensure the posgresql user password is set
  become: true
  become_user: "{{ postgresql_user }}"
  postgresql_user:
    name: "{{ postgresql_user }}"
    password: "{{ postgresql_password }}"
    role_attr_flags: SUPERUSER
  when: postgresql_configure_systemd
