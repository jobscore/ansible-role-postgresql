---
# PostgreSQL installation

- name: Ensure the needed APT packages are present
  apt:
    name:
      - tar
      - gzip
      - build-essential
      - curl
      - make
      - gcc
      - zlib1g-dev
      - libperl-dev
      - libpython-dev
      - libssl-dev
      - libreadline-dev
      - libsystemd-dev
    update_cache: true

- name: Ensure the postgresql user is created
  user:
    name: "{{ postgresql_user }}"
    shell: /bin/bash
    create_home: true

- name: Ensure the src dir is present
  file:
    path: "{{ postgresql_src_dir }}"
    state: directory
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_user }}"
    mode: 0755

- name: Ensure postgresql install tmp dir is created
  file:
    path: "{{ postgresql_tmp_dir }}"
    state: directory
    mode: 0755
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_user }}"

- name: Get postgresql source code
  unarchive:
    src: "https://ftp.postgresql.org/pub/source/v{{ postgresql_version }}/postgresql-{{ postgresql_version }}.tar.gz"
    dest: "{{ postgresql_tmp_dir }}"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_user }}"
    remote_src: true
    creates: "{{ postgresql_tmp_dir }}/configure"
    extra_opts:
      - '--strip=1'

- name: Configure postgresql source
  become: true
  become_user: "{{ postgresql_user }}"
  command: ./configure {{ postgresql_config_params }} --prefix={{ postgresql_src_dir }} --with-openssl --with-systemd
  args:
    chdir: "{{ postgresql_tmp_dir }}"
    creates: "{{ postgresql_tmp_dir }}/GNUmakefile"

- name: Build postgresql from source
  become: true
  become_user: "{{ postgresql_user }}"
  command: make world -j4
  args:
    chdir: "{{ postgresql_tmp_dir }}"
    creates: "{{ postgresql_tmp_dir }}/src/bin/psql/psql"

- name: Install postgresql
  command: make install-world
  args:
    chdir: "{{ postgresql_tmp_dir }}"
    creates: "{{ postgresql_src_dir }}/bin/psql"

- name: Ensure needed ENV vars are set
  copy:
    dest: /etc/profile.d/100-postgresql.sh
    content: |
      export PATH={{ postgresql_src_dir }}/bin:$PATH
      export LD_LIBRARY_PATH={{ postgresql_src_dir }}/lib
      export MANPATH={{ postgresql_src_dir }}/share/man:$MANPATH

- name: Ensure postgresql socket dir is created
  file:
    path: "{{ postgresql_unix_socket_dir }}"
    state: directory
    mode: 0755
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_user }}"

- name: Ensure socket symlink is present
  file:
    state: link
    src: "{{ postgresql_unix_socket_dir }}.s.PGSQL.{{ postgresql_port }}"
    dest: "/tmp/.s.PGSQL.{{ postgresql_port }}"
    force: true
    follow: false

- name: Get available psql binaries
  find:
    paths: "{{ postgresql_src_dir }}/bin"
    file_type: file
  register: psql_bins

- name: Ensure needed symlinks are present
  file:
    src: "{{ item.path }}"
    dest: "/usr/local/bin/{{ item.path | replace(postgresql_src_dir + '/bin', '') }}"
    owner: "{{ item.pw_name }}"
    group: "{{ item.gr_name }}"
    state: link
  when: psql_bins.files|length > 0
  with_items: "{{ psql_bins.files }}"

- name: Ensure postgresql tmp files config is present
  copy:
    dest: /usr/lib/tmpfiles.d/postgresql.conf
    mode: 0755
    content: |
      d {{ postgresql_unix_socket_dir }} 0755 {{ postgresql_user }} {{ postgresql_user }} - -
      L /tmp/.s.PGSQL.{{ postgresql_port }} - - - - {{ postgresql_unix_socket_dir }}.s.PGSQL.{{ postgresql_port }}

- name: Ensure postgresql systemd service file is present
  template:
    src: postgresql.service.j2
    dest: /etc/systemd/system/postgresql.service
    mode: 0664
  register: change_postgresql_service
  when: postgresql_configure_systemd

- name: Ensure the postgresql service is enabled
  systemd:
    name: postgresql
    enabled: true
    daemon_reload: true
  when:
    - change_postgresql_service is changed
    - postgresql_configure_systemd
